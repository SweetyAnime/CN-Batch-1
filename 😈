AIM:
To write a TCP server that listens for a client sending "hello_client", prints the message, and closes the connection.

ALGORITHM:
1. Create a TCP socket.
2. Bind it to a port.
3. Listen for incoming connections.
4. Accept one client connection.
5. Read data from the client.
6. Print the received message.
7. Close the client and server sockets.

PROGRAM:
1. SERVER:

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>

int main() {
    int server_fd, new_socket;
    char buffer[1024] = {0};
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    bind(server_fd, (struct sockaddr*)&address, sizeof(address));
    listen(server_fd, 1);

    printf("Server waiting for connection...\n");
    new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen);
    
    read(new_socket, buffer, 1024);
    printf("Received: %s\n", buffer);

    close(new_socket);
    close(server_fd);
    return 0;
}

2.CLIENT:

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server = {0};
    server.sin_family = AF_INET;
    server.sin_port = htons(8080);
    server.sin_addr.s_addr = inet_addr("127.0.0.1");

    connect(sock, (struct sockaddr*)&server, sizeof(server));
    send(sock, "hello_client", strlen("hello_client"), 0);
    close(sock);
    return 0;
}



SAMPLE OUTPUT:
Server waiting for connection...
Received: hello_client

RESULT:
The TCP server successfully accepted a client connection, received the message "hello_client", printed it, and closed the connection.
